{"version":3,"sources":["logo.svg","config/firebase.js","components/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","Navbar","className","src","logo","React","Component","App","makeStyles","theme","root","flexGrow","overflow","padding","spacing","paper","maxWidth","margin","add_todo","obj","title","state","value","database","ref","child","push","setState","todos","delete_todo","index","splice","edit_todo","edit","update_todo","cancel_update","handleChnge","e","target","this","Card","CardActionArea","CardContent","Typography","gutterBottom","variant","component","TextField","onChange","type","placeholder","label","CardActions","Button","onClick","color","map","v","i","key","Grid","item","Paper","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.076397c3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import * as firebase from 'firebase/app'\r\nimport 'firebase/database'\r\nimport 'firebase/auth'\r\n\r\nvar firebaseConfig = {\r\n    apiKey: \"AIzaSyDLEdnOhnn1_ypscqhNbIEIk-s2CR-AdmI\",\r\n    authDomain: \"firstreactapp-67418.firebaseapp.com\",\r\n    databaseURL: \"https://firstreactapp-67418.firebaseio.com\",\r\n    projectId: \"firstreactapp-67418\",\r\n    storageBucket: \"firstreactapp-67418.appspot.com\",\r\n    messagingSenderId: \"144198415123\",\r\n    appId: \"1:144198415123:web:2b827b4f276908047520e6\",\r\n    measurementId: \"G-65D885VYFC\"\r\n  };\r\n  // Initialize Firebase\r\nexport default  firebase.initializeApp(firebaseConfig);","import React from 'react';\r\nimport './styles.css';\r\nimport logo from '../logo.svg'\r\nclass Navbar extends React.Component{\r\n    render(){\r\n        return(\r\n            <div className=\"navbar\">\r\n                <img src={logo} />\r\n                <h1>Todo Application with react js</h1>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Navbar;","import React from 'react';\nimport firebase from './config/firebase.js'\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport logo from './logo.svg';\n\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\n\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    overflow: 'hidden',\n    padding: theme.spacing(0, 3),\n  },\n  paper: {\n    maxWidth: 400,\n    margin: `${theme.spacing(1)}px auto`,\n    padding: theme.spacing(2),\n  },\n}));\n\nclass App extends React.Component{\n\n  constructor(){\n    super();\n    this.state={\n      // todos:[\"Parkash\",\"kumar\",\"suthar\"],\n      todos:[{title:\"Tea at 7:00 AM\",edit:false},\n      {title:\"Breakfast at 8:30 AM\",edit:false}\n    ],  \n      value:''\n    }\n  }\n\n  add_todo=()=>{\n    let obj ={title:this.state.value};\n    // this.state.todos.push(this.state.value);\n    // console.log(this.state.todos)\n    firebase.database().ref('/').child(\"todo\")\n    .push(obj)\n    this.setState({\n      // todos:this.state.todos\n      todos:[...this.state.todos,obj],\n      // todos:[... this.state.todos,this.state.value]\n      value:\"\"\n\n    })\n  }\n\n  delete_todo = (index)=>{\n    this.state.todos.splice(index,1);\n    this.setState({\n      todos:this.state.todos\n    })\n  }\n\n  edit_todo=(index)=>{\n   \n    this.state.todos[index].edit=true;\n    this.setState({\n      todos:this.state.todos\n    })\n\n    // var updated =prompt(\"Enter value\");\n    // this.state.todos[index]=updated;\n    // this.setState({\n    //   todos:this.state.todos\n    // })\n  }\n  update_todo=(index)=>{\n    this.state.todos[index].edit=true;\n    this.setState({\n      todos:this.state.todos\n    })\n  }\n  cancel_update=(index)=>{\n    this.state.todos[index].edit=false;\n    this.setState({\n      todos:this.state.todos\n    })\n  }\n  handleChnge=(e,index)=>{\n    this.state.todos[index].title=e.target.value;\n    this.setState({\n      todos:this.state.todos\n    })\n  }\n  render(){\n    let {todos,value}=this.state;\n    return  (\n      <div>\n        <Navbar/>\n        {/* <input value={value} onChange={(e)=>this.setState({value:e.target.value})} type=\"text\" placeholder=\"Enter Value\"/>\n        <button onClick={this.add_todo}>Add item</button> */}\n\n        <div className=\"add-item-input\">\n            <Card className=\"add-item\">\n              <CardActionArea>\n              {/* <CardMedia\n                  className=\"media\"\n                  image={logo}\n                  \n                /> */}\n                \n                <CardContent>\n                    <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                      Add items in todo list\n                    </Typography>\n                    <TextField className=\"textfeild\" value={value} onChange={(e)=>this.setState({value:e.target.value})} type=\"text\" placeholder=\"Enter new item in todo list\" label=\"Add new item\" variant=\"outlined\"/>\n        \n                </CardContent>\n                <CardActions>\n                    <Button className=\"button\" onClick={this.add_todo} variant=\"contained\" color=\"primary\" >\n                      Add item\n                    </Button>\n                    \n                  </CardActions>\n              </CardActionArea>\n            </Card>\n\n            <div>\n            <ul>\n              {todos.map((v,i)=>{\n                return <li key={i}>\n                  <Grid item className=\"grid\">\n                    <Paper className=\"paper\">\n                    {v.edit ? <TextField className=\"textfeild\"  type=\"text\" onChange={(e)=>this.handleChnge(e,i)} label=\"Update now\" variant=\"outlined\" />: v.title}\n                    {v.edit ? \n                  \n                  <div>\n                      <Button  className=\"buttons success\" onClick={()=>this.cancel_update(i)} variant=\"contained\" >update</Button>\n                  </div>\n                  :\n                  <Button  className=\"button\" onClick={()=>this.edit_todo(i)} variant=\"contained\" >Edit</Button>\n                  }\n                  \n                  <Button  className=\"button\" onClick={()=>this.delete_todo(i)} variant=\"contained\" color=\"secondary\">Delete</Button>\n                  \n                    </Paper>\n                  </Grid>\n                  </li>\n              })}\n            </ul>\n            </div>\n        </div>\n        \n      </div>\n    )\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}